ptst<-predict(tst,type='response',
newdata =
data.frame(.index=tpgrid,.obs=dg2$.obs[1])
level=0)
ptst<-predictAll(tst,type='response',
newdata =
data.frame(.index=tpgrid,.obs=dg2$.obs[1]),
level=0)
plot(ptst)
plot(ptst$mu)
plot(ptst$sigma)
ptst<-predictAll(tst,type='response',
newdata =
data.frame(.index=tpgrid,.obs=dg2$.obs[1]))
plot(ptst$sigma)
ptst<-predictAll(tst,type='response',
newdata =
data.frame(.index=tpgrid,.obs=dg2$.obs[1]))
lines(ptst$sigma)
ptst<-predictAll(tst,type='response',
newdata =
data.frame(.index=tpgrid,.obs=dg2$.obs[2]))
lines(ptst$sigma)
ptst<-predictAll(tst,type='response',
newdata =
data.frame(.index=tpgrid,.obs=dg2$.obs[3]))
lines(ptst$sigma)
plot(ptst$mu)
ptst<-predictAll(tst,type='response',
newdata =
data.frame(.index=tpgrid,.obs=dg2$.obs[1]))
plot(ptst$mu)
ptst<-predictAll(tst,type='response',
newdata =
data.frame(.index=tpgrid,.obs=dg2$.obs[2]))
lines(ptst$mu)
ptst<-predictAll(tst,type='response',
newdata =
data.frame(.index=tpgrid,.obs=dg2$.obs[3]))
lines(ptst$mu)
ptst<-predictAll(tst,type='response',
newdata =
data.frame(.index=tpgrid,.obs=dg2$.obs[4]))
lines(ptst$mu)
library(gamlss)
library(DVDtest)
library(devtools)
# install_github("wtagr/DVDtest",force=T)
?DVDtest
?BCT
rBCPE(n, mu = 5, sigma = 0.1, nu = 1, tau = 2)
p=6
mu1<-function(t) 0.2*(p-1)*sin(pi*t)+t+1
mu2<-function(t) -0.2*(p-1)*sin(pi*t)+t+1
sig1 <- function(t) t+1
sig2 <- sig1
nu1<-function(t) t+1
nu2<-nu1
nperson=10
fun1<-function(t) rBCCG(nperson,mu=mu1(t),sigma=sig1(t),nu=nu1(t))
fun2<-function(t) rBCCG(nperson,mu=mu2(t),sigma=sig2(t),nu=nu2(t))
tp<-seq(0,1,,10)
data1<-sapply(tp,fun1)
data2<-sapply(tp,fun2)
library(reshape2)
colnames(data1)<-tp
dg1<-melt(data1)
colnames(dg1)<-c('.obs','.index','.value')
dg1$.obs<-as.factor(dg1$.obs)
colnames(data2)<-tp
rownames(data2)<-1:nperson+2*nperson
dg2<-melt(data2)
colnames(dg2)<-c('.obs','.index','.value')
dg2$.obs<-as.factor(dg2$.obs)
library(ggplot2)
ggplot()+geom_line(data=dg1,aes(x=.index,y=.value,col=factor(.obs)),show.legend = F)+
geom_line(data=dg2,aes(x=.index,y=.value,col=factor(.obs)),show.legend = F)
ngrid=50
tpgrid <- seq(0, 1, , ngrid)
nperm. <- 50
formula. <- list(.value~s(.index)+s(.obs, bs="re"), ~s(.index))
exclude. <- "s(.obs)"
tst <- gamlss(
formula=.value~cs(.index)+random(.obs),
sigma.formula=~cs(.index),
nu.formula=~cs(.index),
family=BCCG,
data=dg2)
tst <- gamlss(
formula=.value~.index+random(.obs),
sigma.formula=~.index,
nu.formula=~.index,
family=BCCG,
data=dg2)
tst <- gamlss(
formula=.value~cs(.index)+random(.obs),
sigma.formula=~cs(.index),
nu.formula=~cs(.index),
family=BCCG,
data=dg2)
?gamlss
tst <- gamlss(
formula=.value~cs(.index)+random(.obs),
sigma.formula=~cs(.index),
nu.formula=~cs(.index),
family=BCCG(),
data=dg2)
plot(dGIG)
?dGIG
tst <- gamlss(
formula=.value~cs(.index)+random(.obs),
sigma.formula=~cs(.index),
nu.formula=~cs(.index),
family=GIG(),
data=dg2)
nperson=15
fun1<-function(t) rGIG(nperson,mu=mu1(t),sigma=sig1(t),nu=nu1(t))
fun2<-function(t) rGIG(nperson,mu=mu2(t),sigma=sig2(t),nu=nu2(t))
tp<-seq(0,1,,10)
data1<-sapply(tp,fun1)
data2<-sapply(tp,fun2)
library(reshape2)
colnames(data1)<-tp
dg1<-melt(data1)
colnames(dg1)<-c('.obs','.index','.value')
dg1$.obs<-as.factor(dg1$.obs)
colnames(data2)<-tp
rownames(data2)<-1:nperson+2*nperson
dg2<-melt(data2)
colnames(dg2)<-c('.obs','.index','.value')
dg2$.obs<-as.factor(dg2$.obs)
library(ggplot2)
ggplot()+geom_line(data=dg1,aes(x=.index,y=.value,col=factor(.obs)),show.legend = F)+
geom_line(data=dg2,aes(x=.index,y=.value,col=factor(.obs)),show.legend = F)
ngrid=50
tpgrid <- seq(0, 1, , ngrid)
nperm. <- 50
formula. <- list(.value~s(.index)+s(.obs, bs="re"), ~s(.index))
exclude. <- "s(.obs)"
tst <- gamlss(
formula=.value~cs(.index)+random(.obs),
sigma.formula=~cs(.index),
nu.formula=~cs(.index),
family=GIG(),
data=dg2)
summary(tst)
ptst<-predictAll(tst,type='response',
newdata =
data.frame(.index=tpgrid,.obs=dg2$.obs[4]))
tst$sigma.x
tst$parameters
library(gamlss)
library(DVDtest)
library(devtools)
# install_github("wtagr/DVDtest",force=T)
?DVDtest
?BCT
rBCPE(n, mu = 5, sigma = 0.1, nu = 1, tau = 2)
p=6
mu1<-function(t) 0.2*(p-1)*sin(pi*t)+t+1
mu2<-function(t) -0.2*(p-1)*sin(pi*t)+t+1
sig1 <- function(t) t+1
sig2 <- sig1
nu1<-function(t) t+1
nu2<-nu1
nperson=15
fun1<-function(t) rGIG(nperson,mu=mu1(t),sigma=sig1(t),nu=nu1(t))
fun2<-function(t) rGIG(nperson,mu=mu2(t),sigma=sig2(t),nu=nu2(t))
tp<-seq(0,1,,10)
data1<-sapply(tp,fun1)
data2<-sapply(tp,fun2)
library(reshape2)
colnames(data1)<-tp
dg1<-melt(data1)
colnames(dg1)<-c('.obs','.index','.value')
dg1$.obs<-as.factor(dg1$.obs)
colnames(data2)<-tp
rownames(data2)<-1:nperson+2*nperson
dg2<-melt(data2)
colnames(dg2)<-c('.obs','.index','.value')
dg2$.obs<-as.factor(dg2$.obs)
library(ggplot2)
ggplot()+geom_line(data=dg1,aes(x=.index,y=.value,col=factor(.obs)),show.legend = F)+
geom_line(data=dg2,aes(x=.index,y=.value,col=factor(.obs)),show.legend = F)
ngrid=50
tpgrid <- seq(0, 1, , ngrid)
nperm. <- 50
formula. <- list(.value~s(.index)+s(.obs, bs="re"), ~s(.index))
exclude. <- "s(.obs)"
tst <- gamlss(
formula=.value~cs(.index)+random(.obs),
sigma.formula=~cs(.index),
nu.formula=~cs(.index),
family=GIG(),
data=dg2)
ptst<-predictAll(tst,type='response',
newdata =
data.frame(.index=tpgrid,.obs=dg2$.obs[4]))
tst
tst <- gamlss(
formula=.value~cs(.index)+random(.obs),
sigma.formula=~cs(.index),
nu.formula=~cs(.index),
family=BCT(),
data=dg2)
ptst<-predictAll(tst,type='response',
newdata =
data.frame(.index=tpgrid,.obs=dg2$.obs[4]))
ptst<-predictAll(tst,type='response')
ptst
tst <- gamlss(
formula=.value~cs(.index)+random(.obs),
sigma.formula=~cs(.index),
nu.formula=~cs(.index),
family=BCCG(),
data=dg2)
nperson=15
fun1<-function(t) rBCT(nperson,mu=mu1(t),sigma=sig1(t),nu=nu1(t))
fun2<-function(t) rBCT(nperson,mu=mu2(t),sigma=sig2(t),nu=nu2(t))
tp<-seq(0,1,,10)
data1<-sapply(tp,fun1)
data2<-sapply(tp,fun2)
library(reshape2)
colnames(data1)<-tp
dg1<-melt(data1)
colnames(dg1)<-c('.obs','.index','.value')
dg1$.obs<-as.factor(dg1$.obs)
colnames(data2)<-tp
rownames(data2)<-1:nperson+2*nperson
dg2<-melt(data2)
colnames(dg2)<-c('.obs','.index','.value')
dg2$.obs<-as.factor(dg2$.obs)
library(ggplot2)
ggplot()+geom_line(data=dg1,aes(x=.index,y=.value,col=factor(.obs)),show.legend = F)+
geom_line(data=dg2,aes(x=.index,y=.value,col=factor(.obs)),show.legend = F)
ngrid=50
tpgrid <- seq(0, 1, , ngrid)
nperm. <- 50
formula. <- list(.value~s(.index)+s(.obs, bs="re"), ~s(.index))
exclude. <- "s(.obs)"
nperson=20
fun1<-function(t) rBCT(nperson,mu=mu1(t),sigma=sig1(t),nu=nu1(t))
fun2<-function(t) rBCT(nperson,mu=mu2(t),sigma=sig2(t),nu=nu2(t))
tp<-seq(0,1,,10)
data1<-sapply(tp,fun1)
data2<-sapply(tp,fun2)
library(reshape2)
colnames(data1)<-tp
dg1<-melt(data1)
colnames(dg1)<-c('.obs','.index','.value')
dg1$.obs<-as.factor(dg1$.obs)
colnames(data2)<-tp
rownames(data2)<-1:nperson+2*nperson
dg2<-melt(data2)
colnames(dg2)<-c('.obs','.index','.value')
dg2$.obs<-as.factor(dg2$.obs)
library(ggplot2)
ggplot()+geom_line(data=dg1,aes(x=.index,y=.value,col=factor(.obs)),show.legend = F)+
geom_line(data=dg2,aes(x=.index,y=.value,col=factor(.obs)),show.legend = F)
ngrid=50
tpgrid <- seq(0, 1, , ngrid)
nperm. <- 50
formula. <- list(.value~s(.index)+s(.obs, bs="re"), ~s(.index))
exclude. <- "s(.obs)"
tst <- gamlss(
formula=.value~cs(.index)+random(.obs),
sigma.formula=~cs(.index),
nu.formula=~cs(.index),
family=BCT(),
data=dg2)
summary(tst)
ptst<-predictAll(tst,type='response')
ptst
tst <- gamlss(
formula=.value~cs(.index)+re(random=~1|.obs),
sigma.formula=~cs(.index),
nu.formula=~cs(.index),
family=BCT(),
data=dg2)
summary(tst)
tst <- gamlss(
formula=.value~cs(.index)+re(random=~1|.obs),
sigma.formula=~cs(.index),
nu.formula=~cs(.index),
family=BCT(), method = "REML",
data=dg2)
tst <- gamlss(
formula=.value~cs(.index)+re(random=~1|.obs),
sigma.formula=~cs(.index),
nu.formula=~cs(.index),
family=BCT(), method = mixed(),
data=dg2)
tst
tst <- gamlss(
formula=.value~(.index)+re(random=~1|.obs),
sigma.formula=~(.index),
nu.formula=~(.index),
family=BCT(), method = mixed(),
data=dg2)
tst
data(ergoStool)
t3<-gamlss(effort~Type+re(random=~1|Subject), data=ergoStool )
t3
tst <- gamlss(
formula=.value~(.index)+re(random=~1|.obs),
sigma.formula=~(.index),
nu.formula=~(.index),
family=BCT(), method = mixed(),
data=dg2)
ptst<-predict(tst,type='response')
ptst
?predict.gamlss
ptst<-predict(tst,type='response',what=c("mu","sigma","nu"))
ptst<-predict(tst,type='response',what=c("sigma"))
ptst
plot(ptst)
ptst<-predict(tst,type='response',what=c("sigma"),newdata = data.frame(.index=tpgrid,.obs=dg2$.obs[1]))
ptst
plot(ptst)
ptst<-predict(tst,type='response',what=c("sigma"),
newdata = data.frame(.index=tpgrid,.obs=dg2$.obs[2]))
lines(ptst)
ptst<-predict(tst,type='response',what=c("sigma"),
newdata = data.frame(.index=tpgrid,.obs=dg2$.obs[3]))
lines(ptst)
ptst<-predict(tst,type='response',what=c("sigma"),
newdata = data.frame(.index=tpgrid,.obs=dg2$.obs[10]))
lines(ptst)
?I
nperson=20
fun1<-function(t) rnorm(nperson,mu=mu1(t),sigma=sig1(t),nu=nu1(t))
fun2<-function(t) rnorm(nperson,mu=mu2(t),sigma=sig2(t),nu=nu2(t))
tp<-seq(0,1,,10)
data1<-sapply(tp,fun1)
data2<-sapply(tp,fun2)
library(reshape2)
colnames(data1)<-tp
dg1<-melt(data1)
colnames(dg1)<-c('.obs','.index','.value')
dg1$.obs<-as.factor(dg1$.obs)
colnames(data2)<-tp
rownames(data2)<-1:nperson+2*nperson
dg2<-melt(data2)
colnames(dg2)<-c('.obs','.index','.value')
dg2$.obs<-as.factor(dg2$.obs)
library(ggplot2)
ggplot()+geom_line(data=dg1,aes(x=.index,y=.value,col=factor(.obs)),show.legend = F)+
geom_line(data=dg2,aes(x=.index,y=.value,col=factor(.obs)),show.legend = F)
ngrid=50
tpgrid <- seq(0, 1, , ngrid)
nperm. <- 50
formula. <- list(.value~s(.index)+s(.obs, bs="re"), ~s(.index))
exclude. <- "s(.obs)"
?gamlss.family
tst1<-gam(formula=formula.,data=dg2,family=gaulss())
library(mgcv)
tst1<-gam(formula=formula.,data=dg2,family=gaulss())
ptst1<-predict(tst1,newdata = data.frame(.index=tpgrid,.obs=dg2$.obs[1]),exclude=exclude.)
tst <- gamlss(
formula=.value~(.index)+re(random=~1|.obs),
sigma.formula=~(.index),
nu.formula=~(.index),
family=NO(),
data=dg2)
ptst<-predict(tst,type='response',what=c("sigma"),
newdata = data.frame(.index=tpgrid,.obs=dg2$.obs[1]))
names(ptst1)
ptst1
plot(ptst[,1])
plot(ptst1[,1])
lines(ptst$mu)
ptst<-predict(tst,type='response',what=c("sigma"),
newdata = data.frame(.index=tpgrid,.obs=dg2$.obs[1]))
names(ptst)
ptst
ptst<-predict(tst,type='response',what=c("mu"),
newdata = data.frame(.index=tpgrid,.obs=dg2$.obs[1]))
lines(ptst)
tst <- gamlss(
formula=.value~cs(.index)+re(random=~1|.obs),
sigma.formula=~cs(.index),
nu.formula=~1,
family=NO(),
data=dg2)
ptst<-predict(tst,type='response',what=c("mu"),
newdata = data.frame(.index=tpgrid,.obs=dg2$.obs[1]))
lines(ptst)
ptst<-predict(tst,type='response',what=c("mu"),
newdata = data.frame(.index=tpgrid,.obs=dg2$.obs[2]))
lines(ptst)
ptst<-predict(tst,type='response',what=c("mu"),
newdata = data.frame(.index=tpgrid,.obs=dg2$.obs[3]))
lines(ptst)
ptst<-predict(tst,type='response',what=c("mu"),
newdata = data.frame(.index=tpgrid,.obs=dg2$.obs[4]))
lines(ptst)
ptst<-predict(tst,type='response',what=c("mu"),
newdata = data.frame(.index=tpgrid,.obs=dg2$.obs[5]))
lines(ptst)
ptst<-predict(tst,type='response',what=c("mu"),
newdata = data.frame(.index=tpgrid,.obs=dg2$.obs[10]))
lines(ptst)
ptst<-predictAll(tst,type='response',
newdata = data.frame(.index=tpgrid,.obs=dg2$.obs[10]))
lines(ptst$mu)
ptst<-predictAll(tst,type='response',
newdata = data.frame(.index=tpgrid,.obs=dg2$.obs[11]))
lines(ptst$mu)
tst <- gamlss(
formula=.value~pb(.index)+re(random=~1|.obs),
sigma.formula=~pb(.index),
nu.formula=~1,
family=NO(),
data=dg2)
summary(tst)
ptst<-predictAll(tst,type='response',
newdata = data.frame(.index=tpgrid,.obs=dg2$.obs[11]))
lines(ptst$mu)
ptst<-predictAll(tst,type='response',
newdata = data.frame(.index=tpgrid,.obs=dg2$.obs[1]))
lines(ptst$mu)
ptst<-predictAll(tst,
newdata = data.frame(.index=tpgrid,.obs=dg2$.obs[1]))
lines(ptst$mu)
tst <- gamlssNP(
formula=.value~pb(.index)+re(random=~1|.obs),
sigma.formula=~pb(.index),
nu.formula=~1,
mixture="np",
data=dg2)
library(gamlss.mx)
install.packages("gamlss.mx")
library(gamlss.mx)
tst <- gamlssNP(
formula=.value~pb(.index)+re(random=~1|.obs),
sigma.formula=~pb(.index),
nu.formula=~1,
mixture="np",
data=dg2)
tst <- gamlssNP(
formula=.value~pb(.index),
sigma.formula=~pb(.index),
nu.formula=~1,
random=~1|.obs,
mixture="np",
data=dg2)
summary(tst)
plot(tst)
ptst<-predictAll(tst,
newdata = data.frame(.index=tpgrid,.obs=dg2$.obs[1]))
get(tst)
?gamlss.mx
?predict.gamlss.mx
plotMP(tst)
p=6
mu1<-function(t) 0.2*(p-1)*sin(pi*t)+t+1
mu2<-function(t) -0.2*(p-1)*sin(pi*t)+t+1
sig1 <- function(t) t+1
sig2 <- sig1
nu1<-function(t) t+1
nu2<-nu1
nperson=20
fun1<-function(t) rBCT(nperson,mu=mu1(t),sigma=sig1(t),nu=nu1(t))
fun2<-function(t) rBCT(nperson,mu=mu2(t),sigma=sig2(t),nu=nu2(t))
tp<-seq(0,1,,10)
data1<-sapply(tp,fun1)
data2<-sapply(tp,fun2)
library(reshape2)
colnames(data1)<-tp
dg1<-melt(data1)
colnames(dg1)<-c('.obs','.index','.value')
dg1$.obs<-as.factor(dg1$.obs)
colnames(data2)<-tp
rownames(data2)<-1:nperson+2*nperson
dg2<-melt(data2)
colnames(dg2)<-c('.obs','.index','.value')
dg2$.obs<-as.factor(dg2$.obs)
library(ggplot2)
ggplot()+geom_line(data=dg1,aes(x=.index,y=.value,col=factor(.obs)),show.legend = F)+
geom_line(data=dg2,aes(x=.index,y=.value,col=factor(.obs)),show.legend = F)
ngrid=50
tpgrid <- seq(0, 1, , ngrid)
nperm. <- 50
formula. <- list(.value~s(.index)+s(.obs, bs="re"), ~s(.index))
exclude. <- "s(.obs)"
# library(mgcv)
# tst1<-gam(formula=formula.,data=dg2,family=gaulss())
# ptst1<-predict(tst1,newdata = data.frame(.index=tpgrid,.obs=dg2$.obs[1]),exclude=exclude.)
tst <- gamlss(
formula=.value~pb(.index)+re(random=~1|.obs),
sigma.formula=~pb(.index),
nu.formula=~1,
family=NO(),
data=dg2)
ptst<-predictAll(tst,
newdata = data.frame(.index=tpgrid,.obs=dg2$.obs[1]))
lines(ptst$mu)
plot(ptst$mu)
library(gamlss.mx)
setwd("C:/Users/user/OneDrive/git/wass/DVDtest")
require(devtools)
check("DVDtest")
##
require(roxygen2)
roxygenize("DVDtest")
check("DVDtest")
check("DVDtest")
file<-getwd()
setwd(paste0(file,"/DVDtest"))
# setwd("..")
# system("R CMD Rd2pdf . --title=Package'DVDtest' --output=./manual.pdf --force --no-clean --internals")
system("R CMD Rd2pdf . --title=Package`DVDtest' --output=./manual.pdf --force")
