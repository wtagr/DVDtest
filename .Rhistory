shakespeare_metadata2 <- gutenberg_works(author == "Shakespeare, William",
!str_detect(title, "Works"))
shakespeare_metadata2
gutenberg_subjects %>%
filter(subject == "Detective and mystery stories")
gutenberg_subjects %>%
filter(subject_type == "lcsh")
gutenberg_subjects %>%
filter(subject_type == "lcsh")%>%
count(subject, sort = F)
gutenberg_subjects %>%
filter(subject_type == "lcsh")%>%
count(subject, sort = T)
?count
gutenberg_subjects %>%
filter(subject_type == "lcsh")%>%
tally(subject, sort = T)
gutenberg_subjects %>%
filter(subject_type == "lcsh")%>%
add_tally(subject, sort = T)
gutenberg_subjects %>%
filter(subject_type == "lcsh")%>%
count(subject, sort = T)
tst<-gutenberg_subjects %>%
filter(subject_type == "lcsh")%>%
count(subject, sort = T)
head(tst)
end(tst)
tail(tst)
tst<-gutenberg_subjects %>%
filter(subject_type == "lcsh")
head(tst)
tail(tst)
dim(tst)
tst[1,]
tst[2,]
tst[2,3]
tst[3,3]
tst[4,3]
tst[5,3]
tst[6,3]
tst[7,3]
tst[8,3]
tst[9,3]
gutenberg_subjects %>%
filter(str_detect(subject, "Soldiers' National Cemetery"))
gutenberg_subjects %>%
filter(str_detect(subject, "National Cemetery"))
tst[10,3]
tst[11,3]
tst[12,3]
tst[13,3]
tst[13,]
tst[14,]
tst[15,3]
fc<-as.factor(tst[,3])
tstm<-as.matrix(tst)
fc<-as.factor(tstm)
summary(fc)
install.packages("gRbase")
library(gRbase)
library(RBGL)
install.packages("RBGL")
library(reshape2)
library(ggplot2)
tdm <- melt(testData)
tdm <- matrix(1:100,10)
tdm <- matrix(rnorm(100),10)
ggplot(tdm, aes(x = Var2, y = Var1, fill = factor(value))) +
labs(x = "MHz", y = "Threshold", fill = "Value") +
geom_raster() +
scale_fill_manual(breaks = levels(factor(tdm$value)),
values = c("white", "black")) +
theme(plot.background = element_rect(fill = "grey90"),
legend.background = element_rect(fill = "grey90")) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0))
tdm <- melt(matrix(rnorm(100),10))
ggplot(tdm, aes(x = Var2, y = Var1, fill = factor(value))) +
labs(x = "MHz", y = "Threshold", fill = "Value") +
geom_raster() +
scale_fill_manual(breaks = levels(factor(tdm$value)),
values = c("white", "black")) +
theme(plot.background = element_rect(fill = "grey90"),
legend.background = element_rect(fill = "grey90")) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0))
ggplot(tdm) +
labs(x = "MHz", y = "Threshold", fill = "Value") +
geom_raster() +
scale_fill_manual(breaks = levels(factor(tdm$value)),
values = c("white", "black")) +
theme(plot.background = element_rect(fill = "grey90"),
legend.background = element_rect(fill = "grey90")) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0))
ggplot(tdm) +
geom_raster() +
scale_fill_manual) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0))
ggplot(tdm) +
geom_raster() +
scale_fill_manual)
ggplot(tdm) +
geom_raster() +
scale_fill_manual()
library(ggvis)
install.packages("ggvis")
library(ggvis)
df <- data.frame(x = 1:10, y = (1:10) ^ 2)
df %>% ggvis(~x, ~y, y2 := 0)
df %>% ggvis(~x, ~y, y2 := 0) %>% layer_ribbons()
df <- data.frame(x = c(1, 1, 2, 2), y = c(2, 1, 1, 2))
df %>% ggvis(~x, ~y, stroke := "red") %>% layer_paths()
df <- data.frame(x = c(1, 1, 2, 2), y = c(2, 1, 1, 2))
df %>% ggvis(~x, ~y, stroke := "red") %>% layer_paths()
df %>% ggvis(~x, ~y, height := 20) %>% layer_ribbons()
df <- data.frame(x = 1:10, y = (1:10) ^ 2)
df %>% ggvis(~x, ~y, height := 20) %>% layer_ribbons()
df %>% ggvis(~x, ~y, height := 10) %>% layer_ribbons()
tst<-matrix(1:4,2,2)
raster(tst)
library(raster)
raster(tst)
tst1<-raster(tst)
names(tst1)
tst1$layer
extract(tst1)
ncell(tst1)
raster(tst)
raster(tst,2)
raster(tst,layer=2)
getValues(tst1,4)
getValues(tst1)
tst
extract(tst1,x)
tst1
xyFromCell(tst1, cells)
xyFromCell(tst1)
xyFromCell(tst1, cell)
getValuesBlock(tst1)
cellFromRowColCombine(tst1)
cellFromRowColCombine(tst1,4)
cellFromRowColCombine(tst1,4,1:4)
cellFromRowColCombine(tst1,1,1:4)
cellFromRowColCombine(tst1,0,1:4)
cellFromRowColCombine(tst1,2,1:4)
cellFromRowColCombine(tst1,1:2,1:2)
cellFromRowCol(tst1,2,1:4)
cellFromRowCol(tst1,1:2,1:2)
?`cellFromRowCol
?cellFromRowCol
colFromX(tst1, x)
colFromX(tst1, 1)
colFromX(tst1, 2)
tst1[cells]
tst[1:2,1:2,drop=F]
tst1[1:2,1:2,drop=F]
res(tst1)
values(tst1)
?values
xyFromCell(tst1,values(tst1))
plot(tst)
plot(tst1)
library(gutenbergr)
library(dplyr)
?gutenberg_authors
attr(gutenberg_authors, "date_updated")
tst<-gutenberg_subjects %>%
filter(subject_type == "lcsh")
?tst
head(tst)
?gutenberg_metadata
gutenberg_metadata %>%
count(author, sort = TRUE)
shakespeare_metadata2 <- gutenberg_works(author == "Shakespeare, William",
!str_detect(title, "Works"))
library(stringr)
shakespeare_metadata2 <- gutenberg_works(author == "Shakespeare, William",
!str_detect(title, "Works"))
View(shakespeare_metadata2)
View(shakespeare_metadata2)
shakespeare_metadata <- gutenberg_metadata %>%
filter(author == "Shakespeare, William",
language == "en",
!str_detect(title, "Works"),
has_text,
!str_detect(rights, "Copyright")) %>%
distinct(title)
View(shakespeare_metadata)
View(shakespeare_metadata)
install.packages("brainGraph")
require(brainGraph)
plot_brainGraph_gui()
install.packages("RGtk2")
install.packages("cairoDevice")
plot_brainGraph_gui()
plot_brainGraph_gui()
install.packages("gWidgets", depen=T)
install.packages("gWidgetsRGtk2", depen=T)
library(gWidgets)
options(guiToolkit="RGtk2")
win <- gwindow("test")
glabel("test label", container = win)
gedit("test text field", container = win)
plot_brainGraph_gui()
load(c:/Users/user/Downloads/PhilData.Rdata")
load(c://Users/user/Downloads/PhilData.Rdata")
load(C:/Users/user/Downloads/PhilData.Rdata")
load("C:/Users/user/Downloads/PhilData.Rdata")
dt10=list()
for (i in 1:I) for (j in 1:J[i]){
dt10[[sum(J[1:i-1])+j]]=fmridata[[i]][[j]]
}
J=lengths(fmridata)
I=length(fmridata)
dt10=list()
for (i in 1:I) for (j in 1:J[i]){
dt10[[sum(J[1:i-1])+j]]=fmridata[[i]][[j]]
}
name<-c(37:40,35,36,67,68,23,24)
colnames(dt10[[1]])<-aal116$name[name]
tc<-cor(dt10[[1]])
tcor<-soft.thhd(tc,.3)
hard.thhd <- function(x,thr.c) x*(abs(x)>thr.c)
soft.thhd <- function(x,thr.c) sign(x)*pmax(abs(x)-thr.c,0);
name<-c(37:40,35,36,67,68,23,24)
colnames(dt10[[1]])<-aal116$name[name]
tc<-cor(dt10[[1]])
tcor<-soft.thhd(tc,.3)
tpcor<-soft.thhd(cor2pcor(tc),.3)
require(corpcor)
name<-c(37:40,35,36,67,68,23,24)
colnames(dt10[[1]])<-aal116$name[name]
tc<-cor(dt10[[1]])
tcor<-soft.thhd(tc,.3)
tpcor<-soft.thhd(cor2pcor(tc),.3)
itcor<-graph_from_adjacency_matrix(abs(tcor),mode="undirected",diag=F,weighted = T);itcor
set_brainGraph_attr(itcor,atlas="aal116")
aal10<-aal116[name,]
itcor<-graph_from_adjacency_matrix(abs(tcor),mode="undirected",diag=F,weighted = T);itcor
set_brainGraph_attr(itcor,atlas="aal10")
trackback()
traceback()
install.packages(
brainGraph
, INSTALL_opts=
--no-multiarch
)
install.packages(
'brainGraph
, INSTALL_opts=
--no-multiarch
)
install.packages('brainGraph',INSTALL_opts = '--no-multiarch')
require(brainGraph)
plot_brainGraph_gui()
install.packages("gWidgets", depen=T)
install.packages("gWidgetsRGtk2", depen=T)
library(gWidgets)
options(guiToolkit="RGtk2")
win <- gwindow("test")
glabel("test label", container = win)
gedit("test text field", container = win)
load("C:/Users/user/Downloads/PhilData.Rdata")
dt10=list()
for (i in 1:I) for (j in 1:J[i]){
dt10[[sum(J[1:i-1])+j]]=fmridata[[i]][[j]]
}
J=lengths(fmridata)
I=length(fmridata)
for (i in 1:I) for (j in 1:J[i]){
dt10[[sum(J[1:i-1])+j]]=fmridata[[i]][[j]]
}
hard.thhd <- function(x,thr.c) x*(abs(x)>thr.c)
soft.thhd <- function(x,thr.c) sign(x)*pmax(abs(x)-thr.c,0);
require(corpcor)
name<-c(37:40,35,36,67,68,23,24)
colnames(dt10[[1]])<-aal116$name[name]
tc<-cor(dt10[[1]])
tcor<-soft.thhd(tc,.3)
tpcor<-soft.thhd(cor2pcor(tc),.3)
aal10<-aal116[name,]
itcor<-graph_from_adjacency_matrix(tcor,mode="undirected",diag=F,weighted = T);itcor
set_brainGraph_attr(itcor,atlas="aal10")
t1<-make_brainGraph(itcor,aal10)
t1<-make_brainGraph(itcor,"aal10")
plot(t1)
plot_brainGraph(t1)
?plot.brainGraph
install.packages("freesurfer")
?llply
?Map
?map
itcor
summary(itcor)
?set_brainGraph_attr
set_brainGraph_attr(itcor,atlas="aal10")
plot(itcor)
plot(itcor)
set_brainGraph_attr(itcor,atlas="aal10",modality="fmri")
set_brainGraph_attr(itcor,atlas="aal10",.progress='text')
set_brainGraph_attr(itcor,atlas="aal10")
str(itcor)
str(t1)
names(t1)
t1[[1]]
t1[[2]]
t1[[10]]
t1[[11]]
t1
summary(t2)
summary(t1)
suppressMessages(library(brainGraph))
OS <- .Platform$OS.type
if (OS ==
windows
) f
if (OS == 'windows') {
pacman::p_load(snow, doSNOW)
num.cores <- as.numeric(Sys.getenv('NUMBER_OF_PROCESSORS'))
cl <- makeCluster(num.cores, type='SOCK')
clusterExport(cl, sim.rand.graph.par)
registerDoSNOW(cl)
}
install.packages("pacman")
if (OS == 'windows') {
pacman::p_load(snow, doSNOW)
num.cores <- as.numeric(Sys.getenv('NUMBER_OF_PROCESSORS'))
cl <- makeCluster(num.cores, type='SOCK')
clusterExport(cl, sim.rand.graph.par)
registerDoSNOW(cl)
}
OS
if (OS == 'windows') {
pacman::p_load(snow, doSNOW)
num.cores <- as.numeric(Sys.getenv('NUMBER_OF_PROCESSORS'))
cl <- makeCluster(num.cores, type='SOCK')
clusterExport(cl, 'sim.rand.graph.par')
registerDoSNOW(cl)
}
ls('package:brainGraph')
covars
require(brainGraph)
covars
parc=
aparc
measure='thickness'
subjects=$(ls -d [[:lower:]]*[a-z0-9]*/)
subs=$(ls -d [[:lower:]]*[a-z0-9]*/)
subs$(ls -d [[:lower:]]*[a-z0-9]*/)
require(devtools)
install_github("wtagr/betav1")
install_github("wtagr/betav1")
install_github("wtagr/betav1")
?dm2icc
betav1::dm2icc
?betav1::dm2icc
install.packages("matlib")
install_github("wtagr/dbicc")
install.packages("devtools")
library(devtools)
install_github()
install_github(wtagt/dbicc)
install_github(wtagr/dbicc)
install_github('wtagr/dbicc')
library(dbicc)
dm2icc
require(dbicc)
dm2icc
?dm2icc
?`dbicc-packagage''
''
?dbicc
library(dbicc)
dm2icc
?dm2icc
library(dbicc)
install.packages("dbicc")
install.packages("dbicc")
library(devtools)
install_github("wtagr/dbicc")
library(dbicc)
?dm2icc
dm2icc
library(devtools)
install_github("wtagr/dbicc")
library(dbicc)
?dm2icc
dm2icc
?boot.dbicc
dt1<-data.frame(a=1:2,b=2:3,c=3:4)
dt1
dt1<-data.frame(a=1:2,b=2:3,c=3:4)
dt2<-data.frame(a=1:2,b=2:3,c=3:4)
lst<-list(dt1,dt2)
lst
str(lst)
names(lst)
range(lst)
length(lst)
is.list(lst)
is.list(lst)==F
is.list(lst)!=F
?break
all(T,T)
all(F,F)
!all(F,F)
!all(F,T)
?all
any(T,T)
any(T,G)
any(T,F)
!any(T,F)
!any(T,T)
!any(F,F)
!any(T,T)
!any(T,F)
dimnames(lst)
dimnames(lst[1])
dimnames(lst[[1]])
rownames(lst[[1]])
colnames(lst[[1]])
list(dt1)
length(list(dt1))
"e" %in% "ex"
"e" %in% "e,x"
lst1<-list(a=1,b=2)
lst1
a %in% lst1
b %in% lst1
names(lst1)
b %in% names(lst1)
"b" %in% lst1
"b" %in% names(lst1)
%in%
?%in%
help("%in%")
!"b" %in% names(lst1)
lst1
unlist(lst1)
unlist(lst)
which(names(lst1)="b")
which(names(lst1)=="b")
?lapply
sapply(1:2,rnorm)
sapply(1:1,rnorm)
sapply(1:1,rnorm,simplify = TRUE)
sapply(1:3,rnorm,simplify = TRUE)
sapply(rep(1,10),rnorm,simplify = TRUE)
sapply(rep(2,10),rnorm,simplify = TRUE)
lst1
lst[a]
lst1[[a]]
lst1[["a"]]
lst1["a"]
setwd("C:/Users/user/OneDrive/git/wass/DVDtest")
file<-getwd()
setwd(paste0(file,"/DVDtest"))
# setwd("..")
# system("R CMD Rd2pdf . --title=Package'DVDtest' --output=./manual.pdf --force --no-clean --internals")
system("R CMD Rd2pdf . --title=Package`DVDtest' --output=./manual.pdf --force")
# setwd("..")
# system("R CMD Rd2pdf . --title=Package'DVDtest' --output=./manual.pdf --force --no-clean --internals")
system("R CMD Rd2pdf . --title=Package`DVDtest' --output=./manual.pdf --force")
setwd('..')
roxygenize("DVDtest")
##
require(roxygen2)
roxygenize("DVDtest")
file<-getwd()
setwd(paste0(file,"/DVDtest"))
# setwd("..")
# system("R CMD Rd2pdf . --title=Package'DVDtest' --output=./manual.pdf --force --no-clean --internals")
system("R CMD Rd2pdf . --title=Package`DVDtest' --output=./manual.pdf --force")
library(DVDtest)
library(DVDtest)
###
p <- 3
mu1 <- function(t) 0.2*(p-1)*sin(pi*t)+t+1
mu2 <- function(t) -0.2*(p-1)*sin(pi*t)+t+1
sig1 <- function(t) t+1
sig2 <- sig1
nperson <- 15
fun1 <- function(t) rnorm(nperson, mu1(t), sig1(t))
fun2 <- function(t) rnorm(nperson, mu2(t), sig2(t))
tp <- seq(0,1,,10)
data1 <- sapply(tp,fun1)
data2 <- sapply(tp,fun2)
library(reshape2)
colnames(data2) <- colnames(data1) <- tp
rownames(data2) <- 1:nperson+2*nperson
dg1 <- melt(data1)
dg2 <- melt(data2)
colnames(dg1) <- colnames(dg2) <- c('.obs','.index','.value')
dg1$.obs <- as.factor(dg1$.obs)
dg2$.obs <- as.factor(dg2$.obs)
# library(ggplot2)
# ggplot() + geom_line(data = dg1, aes(x = .index,y = .value, col = factor(.obs)))
# + geom_line(data = dg2, aes(x = .index, y = .value, col = factor(.obs)))
ngrid <- 50
ev.grid <- seq(0, 1, , ngrid)
nperm. <- 50
dg3=list(dg1,dg1)
dg4=list(dg2,dg2)
simu.test <- DVDtest(dg3, dg4, nperm. ,ev.grid)
DVDplot(simu.test)
simu.test <- DVDtest(dg1, dg2, nperm. ,ev.grid)
simu.test <- DVDtest(dg1, dg2, nperm. ,ev.grid)
simu.test <- DVDtest(dg1, dg2, nperm. ,ev.grid)
DVDplot(simu.test)
